package json_to_go

import (
	_ "embed"
	"reflect"
	"testing"
)

//go:embed sample.json
var sample string

func TestGenerateStructNum(t *testing.T) {
	testCases := []struct {
		value    string
		inline   bool
		expected int
	}{
		{
			value:    sample,
			inline:   false,
			expected: 5,
		},
		{
			value:    sample,
			inline:   true,
			expected: 1,
		},
	}
	t.Run("generate_struct_test_output_num", func(t *testing.T) {
		for _, tc := range testCases {
			meta := Parse(tc.value)
			got := GenerateStruct(meta, tc.inline)
			if len(got) != tc.expected {
				t.Errorf("expected: %d, got: %d", tc.expected, len(got))
			}
		}
	})
}

func TestGenerateStructOutput(t *testing.T) {
	testCases := []struct {
		value    string
		inline   bool
		expected []string
	}{
		{
			value:    `[]`,
			inline:   false,
			expected: []string{`type AutoGenerated []any`},
		},
		{
			value:    `[100000000, 200000000, 300000000]`,
			inline:   false,
			expected: []string{`type AutoGenerated []int64`},
		},
		{
			value:    `[100000000, true]`,
			inline:   false,
			expected: []string{`type AutoGenerated []any`},
		},

		{
			value: `[{
	"input_index": 0,
	"components": [{
		"primary_number": "1",
		"a": 0.83
	}, {
		"a": 1.01,
		"b": 1.28
	}]
}]`,
			inline: true,
			expected: []string{
				"type AutoGenerated []struct {\n" +
					"\tInputIndex int64 `json:\"input_index\"`\n" +
					"\tComponents []struct {\n" +
					"\t\tPrimaryNumber string `json:\"primary_number,omitempty\"`\n" +
					"\t\tA float64 `json:\"a\"`\n" +
					"\t\tB float64 `json:\"b,omitempty\"`\n" +
					"\t} `json:\"components\"`\n}",
			},
		},
	}
	t.Run("generate_struct_test_output", func(t *testing.T) {
		for _, tc := range testCases {
			meta := Parse(tc.value)
			got := GenerateStruct(meta, tc.inline)
			if !reflect.DeepEqual(got, tc.expected) {
				t.Errorf("expected: %s, got: %s", tc.expected, got)
			}
		}
	})
}
